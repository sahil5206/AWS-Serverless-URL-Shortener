name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: 3.11

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting
      run: |
        flake8 lambda/ tests/
        isort --check-only lambda/ tests/
        black --check lambda/ tests/

    - name: Run type checking
      run: mypy lambda/

    - name: Run tests
      run: pytest --cov=lambda --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      uses: bandit-action/bandit@v1
      with:
        path: lambda/
        level: medium
        confidence: medium

  terraform-plan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0

    - name: Terraform Format Check
      run: terraform fmt -check -recursive terraform/

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var="environment=dev"

  deploy-dev:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Deploy Infrastructure
      run: |
        cd terraform
        terraform init
        terraform plan -var="environment=dev"
        terraform apply -auto-approve -var="environment=dev"

    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Build and Deploy Lambda
      run: |
        sam build
        sam deploy --stack-name url-shortener-dev --parameter-overrides Environment=dev

  deploy-prod:
    runs-on: ubuntu-latest
    needs: [test, security, terraform-plan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Deploy Infrastructure
      run: |
        cd terraform
        terraform init
        terraform plan -var="environment=prod"
        terraform apply -auto-approve -var="environment=prod"

    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Build and Deploy Lambda
      run: |
        sam build
        sam deploy --stack-name url-shortener-prod --parameter-overrides Environment=prod
